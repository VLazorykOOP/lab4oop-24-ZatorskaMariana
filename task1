// Vector3F.cpp
#include <iostream>
#include <cmath>
using namespace std;

class Vector3F {
private:
    float x, y, z;
    int State;
    static int objectCount;

public:
    // Конструктори
    Vector3F();
    Vector3F(float v);
    Vector3F(float a, float b, float c);
    Vector3F(const Vector3F& other);
    Vector3F(float* arr);
    ~Vector3F();

    Vector3F& operator++();
    Vector3F operator++(int);
    Vector3F& operator--();
    Vector3F operator--(int);

    bool operator!() const;
    Vector3F operator~() const;
    Vector3F operator-() const;

    Vector3F& operator=(const Vector3F& other);

    Vector3F& operator+=(const Vector3F& other);
    Vector3F& operator-=(const Vector3F& other);
    Vector3F& operator*=(float value);
    Vector3F& operator/=(float value);
    Vector3F& operator&=(const Vector3F& other);
    Vector3F& operator%=(int value);

    friend Vector3F operator+(Vector3F a, const Vector3F& b);
    friend Vector3F operator-(Vector3F a, const Vector3F& b);
    friend Vector3F operator*(Vector3F a, float v);
    friend Vector3F operator/(Vector3F a, float v);
    friend Vector3F operator%(Vector3F a, int v);
    friend Vector3F operator&(Vector3F a, const Vector3F& b);

    friend istream& operator>>(istream& in, Vector3F& vec);
    friend ostream& operator<<(ostream& out, const Vector3F& vec);

    bool operator==(const Vector3F& other) const;
    bool operator!=(const Vector3F& other) const;
    bool operator>(const Vector3F& other) const;
    bool operator<(const Vector3F& other) const;
    bool operator>=(const Vector3F& other) const;
    bool operator<=(const Vector3F& other) const;

    float& operator[](int index);
    float magnitude() const;
    void operator()() const;

    static int getObjectCount();
};

int Vector3F::objectCount = 0;

// Визначення методів поза класом
Vector3F::Vector3F() : x(0), y(0), z(0), State(0) { objectCount++; }
Vector3F::Vector3F(float v) : x(v), y(v), z(v), State(0) { objectCount++; }
Vector3F::Vector3F(float a, float b, float c) : x(a), y(b), z(c), State(0) { objectCount++; }
Vector3F::Vector3F(const Vector3F& other) : x(other.x), y(other.y), z(other.z), State(other.State) { objectCount++; }
Vector3F::Vector3F(float* arr) {
    if (!arr) {
        x = y = z = 0; State = 1;
    } else {
        x = arr[0]; y = arr[1]; z = arr[2]; State = 0;
    }
    objectCount++;
}
Vector3F::~Vector3F() { cout << "Vector destroyed. State: " << State << endl; objectCount--; }

Vector3F& Vector3F::operator++() { x++; y++; z++; return *this; }
Vector3F Vector3F::operator++(int) { Vector3F temp = *this; ++(*this); return temp; }
Vector3F& Vector3F::operator--() { x--; y--; z--; return *this; }
Vector3F Vector3F::operator--(int) { Vector3F temp = *this; --(*this); return temp; }

bool Vector3F::operator!() const { return !(x == 0 && y == 0 && z == 0); }
Vector3F Vector3F::operator~() const { return Vector3F(-y, x, z); }
Vector3F Vector3F::operator-() const { return Vector3F(-x, -y, -z); }

Vector3F& Vector3F::operator=(const Vector3F& other) {
    if (this != &other) {
        x = other.x; y = other.y; z = other.z; State = other.State;
    }
    return *this;
}

Vector3F& Vector3F::operator+=(const Vector3F& other) { x += other.x; y += other.y; z += other.z; return *this; }
Vector3F& Vector3F::operator-=(const Vector3F& other) { x -= other.x; y -= other.y; z -= other.z; return *this; }
Vector3F& Vector3F::operator*=(float value) { x *= value; y *= value; z *= value; return *this; }
Vector3F& Vector3F::operator/=(float value) {
    if (value == 0) { State = 2; return *this; }
    x /= value; y /= value; z /= value; return *this;
}
Vector3F& Vector3F::operator&=(const Vector3F& other) {
    float nx = y * other.z - z * other.y;
    float ny = z * other.x - x * other.z;
    float nz = x * other.y - y * other.x;
    x = nx; y = ny; z = nz;
    return *this;
}
Vector3F& Vector3F::operator%=(int value) {
    x = static_cast<int>(x) % value;
    y = static_cast<int>(y) % value;
    z = static_cast<int>(z) % value;
    return *this;
}

Vector3F operator+(Vector3F a, const Vector3F& b) { return a += b; }
Vector3F operator-(Vector3F a, const Vector3F& b) { return a -= b; }
Vector3F operator*(Vector3F a, float v) { return a *= v; }
Vector3F operator/(Vector3F a, float v) { return a /= v; }
Vector3F operator%(Vector3F a, int v) { return a %= v; }
Vector3F operator&(Vector3F a, const Vector3F& b) { return a &= b; }

istream& operator>>(istream& in, Vector3F& vec) {
    cout << "Введіть x, y, z: ";
    return in >> vec.x >> vec.y >> vec.z;
}
ostream& operator<<(ostream& out, const Vector3F& vec) {
    return out << "(" << vec.x << ", " << vec.y << ", " << vec.z << ")";
}

bool Vector3F::operator==(const Vector3F& other) const { return x == other.x && y == other.y && z == other.z; }
bool Vector3F::operator!=(const Vector3F& other) const { return !(*this == other); }
bool Vector3F::operator>(const Vector3F& other) const { return magnitude() > other.magnitude(); }
bool Vector3F::operator<(const Vector3F& other) const { return magnitude() < other.magnitude(); }
bool Vector3F::operator>=(const Vector3F& other) const { return magnitude() >= other.magnitude(); }
bool Vector3F::operator<=(const Vector3F& other) const { return magnitude() <= other.magnitude(); }

float& Vector3F::operator[](int index) {
    switch (index) {
        case 0: return x;
        case 1: return y;
        case 2: return z;
        default: State = 3; return z;
    }
}

float Vector3F::magnitude() const { return sqrt(x * x + y * y + z * z); }
void Vector3F::operator()() const { cout << "Виклик вектора: " << *this << endl; }
int Vector3F::getObjectCount() { return objectCount; }

int main() {
    Vector3F a, b;
    cin >> a;
    cin >> b;

    Vector3F temp1 = b * 2.0f;
    Vector3F temp2 = a / 0.5f;
    Vector3F temp3 = a + temp1;
    Vector3F temp4 = temp3 - temp2;
    Vector3F temp5 = b % 2;
    Vector3F c = temp4 & temp5;

    cout << "temp1 (b * 2): " << temp1 << endl;
    cout << "temp2 (a / 0.5): " << temp2 << endl;
    cout << "temp3 (a + b*2): " << temp3 << endl;
    cout << "temp4 (temp3 - temp2): " << temp4 << endl;
    cout << "temp5 (b % 2): " << temp5 << endl;
    c();
    cout << "Результат (c): " << c << endl;

    cout << "Кількість об'єктів: " << Vector3F::getObjectCount() << endl;
    return 0;
}
